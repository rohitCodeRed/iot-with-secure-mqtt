<script>
var LED_STATE=false;
var PORT = document.getElementById("serverInfoElem").getAttribute("data-port");
var IP = document.getElementById("serverInfoElem").getAttribute("data-ip");
var END_POINT = document.getElementById("serverInfoElem").getAttribute("data-ep");
const SENSORS = [{"sensor":"Temperature","type":"celcius"},
                      {"sensor":"Humidity","type":"%"},
                      {"sensor":"Vibration","type":"binary"}
                    ];
const sampleData = {
                    "timestamp":"12",
                    "data":[
                      {"sensor":"Temperature","value":"32","type":"celcius"},
                      {"sensor":"Humidity","value":"14.5","type":"%"},
                      {"sensor":"Vibration","value":"1","type":"binary"}
                  ]};

const CURRENT_INFO={
    ip:IP,
    port:PORT,
    endPoint:"\/"+END_POINT
}

var socket = new WebSocket("ws:\/\/"+CURRENT_INFO.ip+":"+CURRENT_INFO.port+CURRENT_INFO.endPoint);
    // Connection opened
    socket.addEventListener('open', (event) => {
        //socket.send('Hello Server!, Send latest changed data..');
        console.log("Socket established...");
    });

    // Listen for messages
    socket.addEventListener('message', (event) => {
        var serverData = JSON.parse(event.data);
        console.log(serverData);
        ADD_CHART_DATA(chartObj,serverData);
        //TODO....

    });

    socket.addEventListener('close',()=>{
        console.log("Connection got closed.. bye bye server");
    });

    socket.addEventListener("error",(err)=>{
        console.log("Error occured", err);
        console.log("Server info: ",CURRENT_INFO);
    });

    const gData = [
    { year: 2010, count: 10 },
    { year: 2011, count: 20 },
    { year: 2012, count: 15 },
    { year: 2013, count: 25 },
    { year: 2014, count: 22 },
    { year: 2015, count: 30 },
    { year: 2016, count: 28 },
  ];

  let singleData ={year: 2017, count: 32 }

  const chartObj = new Chart(
    document.getElementById('tempLine'),
    {
      type: 'line',
      data: {
        labels: [],
        datasets: SENSORS.map(sensor => { return {label: sensor["sensor"],data: [],"pointRadius":2,"tension":0.4,"borderWidth":1}; })
      }
    }
  );

  // ADD_DATA_SET(chartObj,gData);
  //ADD_CHART_DATA(chartObj,sampleData);

  function ADD_CHART_DATA(pChart,pData){
    const data = pChart.data;
    if (data.datasets.length > 0) {
      data.labels.push(formaDate(pData["timestamp"]));

      for (let index = 0; index < data.datasets.length; ++index) {
        let dataArr = pData["data"];
        let findObj = dataArr.find(element => {
          return element["sensor"] == data.datasets[index].label
        });

        if(findObj){
          data.datasets[index].data.push(findObj["value"]);
        } 
      }

      pChart.update();
    }
  }

  function formaDate(epochTime){
    let cTime = (new Date(parseInt(epochTime*1000)));
    let sTime = `${cTime.getHours()}:${cTime.getMinutes()}:${cTime.getSeconds()}`;
    return sTime;   
  }

  // function ADD_DATA_SET(pChart,pData){
  //   const data = pChart.data;
  //     const newDataset = {
  //       label: 'Dataset ' + (data.datasets.length + 1),
  //       data: pData.map(row => row.count + 12)
  //     };

  //     pChart.data.datasets.push(newDataset);
  //     pChart.update();
  // }

//----------Socket code end------------------------------------

//button event code...
var bulbSvg = document.querySelector('.bi-lightbulb-fill');
var ledBtn = document.querySelector('.btn');
ledBtn.addEventListener('click', function () {
    LED_STATE = !LED_STATE;
    if(LED_STATE){
      socket.send(JSON.stringify({"topic":"rgb_light","data":{"value":"ON"}}));
      bulbSvg.setAttribute("fill", "red");
    }else{
      socket.send(JSON.stringify({"topic":"rgb_light","data":{"value":"OFF"}}));
      bulbSvg.setAttribute("fill", "grey");
    }

});
 
</script>