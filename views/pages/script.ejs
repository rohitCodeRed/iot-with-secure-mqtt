<script>
var LED_STATE=false;
var PORT = document.getElementById("serverInfoElem").getAttribute("data-port");
var IP = document.getElementById("serverInfoElem").getAttribute("data-ip");
var END_POINT = document.getElementById("serverInfoElem").getAttribute("data-ep");
var bulbSvg = document.querySelector('.bi-lightbulb-fill');
var ledBtn = document.querySelector('.btn');
const TOPICS=["sensor_data","vibrate_data","rgb_light"];

const TEMP_HUM_SENSOR = [{"sensor":"Temperature","type":"celcius"},
                      {"sensor":"Humidity","type":"%"}];

const VIB_SENSOR = [{"sensor":"Vibration","type":"binary"}];

const sampleData = {
                    "timestamp":"12",
                    "topic":"sensor_data", //vibrate_data
                    "data":[
                      {"sensor":"Temperature","value":"32","type":"celcius"},
                      {"sensor":"Humidity","value":"14.5","type":"%"},
                      {"sensor":"Vibration","value":"1","type":"binary"}
                  ]};

const chartOptions ={
        scales: {
            xAxes: [{
              ticks: {
                  autoSkip: true,
                  maxRotation: 20
              }
            }],
            yAxes: [{
                  display: true,
                  ticks: {
                      beginAtZero: true,
                      steps: 10,
                      stepValue: 5,
                      max: 100
                  }
            }]
        }
      };
const CURRENT_INFO={
    ip:IP,
    port:PORT,
    endPoint:"\/"+END_POINT
}




//...................Chart function start..............................
  const t_h_chart = new Chart(
    document.getElementById('tempLine'),
    {
      type: 'line',
      data: {
        labels: [],
        datasets: TEMP_HUM_SENSOR.map(sensor => { return {label: sensor["sensor"],data: [],"pointRadius":2,"tension":0.4,"borderWidth":1}; })
      },
      options: {
        scales: {
            x:{
              ticks: {
                  autoSkip: true,
                  maxRotation: 20
              }
            },
            y:{   
                max: 100,
                min:0,
                display: true,
                ticks: {
                    beginAtZero: true,
                }
            }
        }
      }
    }
  );

  const v_chart = new Chart(
    document.getElementById('vibLine'),
    {
      type: 'line',
      data: {
        labels: [],
        datasets: VIB_SENSOR.map(sensor => { return {label: sensor["sensor"],data: [],"pointRadius":1,"tension":0.4,"borderWidth":1}; })
      },
      options: {
        scales: {
          x:{
              ticks: {
                  autoSkip: true,
                  maxRotation: 20
              }
            },
            y:{
                max: 2,
                min: 0,
                display: true,
                ticks: {
                    beginAtZero: true
                }
            }
        }
      }
    }
  );


  function ADD_CHART_DATA(pChart,pData){
    const data = pChart.data;
    if (data.datasets.length > 0) {
      data.labels.push(formaDate(pData["timestamp"]));

      for (let index = 0; index < data.datasets.length; ++index) {
        let dataArr = pData["data"];
        let findObj = dataArr.find(element => {
          return element["sensor"] == data.datasets[index].label
        });

        if(findObj){
          data.datasets[index].data.push(findObj["value"]);
        } 
      }

      pChart.update();
    }
  }

  function formaDate(epochTime){
    let cTime = (new Date(parseInt(epochTime*1000)));
    let sTime = `${cTime.getHours()}:${cTime.getMinutes()}:${cTime.getSeconds()}`;
    return sTime;   
  }

  //...................Chart function end..................



//----------Socket code start------------------------------------
const socket = new WebSocket("ws:\/\/"+CURRENT_INFO.ip+":"+CURRENT_INFO.port+CURRENT_INFO.endPoint);
    // Connection opened
    socket.addEventListener('open', (event) => {
        //socket.send('Hello Server!, Send latest changed data..');
        console.log("Socket established...");
    });

    // Listen for messages
    socket.addEventListener('message', (event) => {
        var serverData = JSON.parse(event.data);
        
        if(serverData["topic"] == "sensor_data"){
          ADD_CHART_DATA(t_h_chart,serverData);
        }else if(serverData["topic"] == "vibrate_data"){
          ADD_CHART_DATA(v_chart,serverData);
        }else if(serverData["topic"] == "rgb_light"){
          handleLight(serverData);
        }

        console.log(serverData);
    });

    socket.addEventListener('close',()=>{
        console.log("Connection got closed.. bye bye server");
    });

    socket.addEventListener("error",(err)=>{
        console.log("Error occured", err);
        console.log("Server info: ",CURRENT_INFO);
    });

//----------Socket code end------------------------------------




//button event code...

ledBtn.addEventListener('click', function () {
    LED_STATE = !LED_STATE;
    if(LED_STATE){
      socket.send(JSON.stringify({"topic":"rgb_light","data":{"value":"Y"}}));
      bulbSvg.setAttribute("fill", "red");
    }else{
      socket.send(JSON.stringify({"topic":"rgb_light","data":{"value":"N"}}));
      bulbSvg.setAttribute("fill", "grey");
    }

});

function handleLight(servData){
  let value = servData["data"][0]["value"];
  
  if(value =="Y"){
    bulbSvg.setAttribute("fill", "red");
    LED_STATE = true;
  }else{
    bulbSvg.setAttribute("fill", "grey");
    LED_STATE = false;
  }
}
 
</script>